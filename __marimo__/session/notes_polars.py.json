{
  "version": "1",
  "metadata": {
    "marimo_version": "0.12.4"
  },
  "cells": [
    {
      "id": "Hbol",
      "code_hash": "2bfb2d6550fd4e6cbb8217389702013e",
      "outputs": [],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "1d0db38904205bec4d6f6f6a1f6cec3e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "vblA",
      "code_hash": "48f9ce6933b2bd65fba06745776b6bb9",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "bkHC",
      "code_hash": "59dc29e12c8669b3977cbebf5f935a19",
      "outputs": [],
      "console": []
    },
    {
      "id": "lEQa",
      "code_hash": "37a85c675a8f27834c69a7beb59d10c2",
      "outputs": [],
      "console": []
    },
    {
      "id": "PKri",
      "code_hash": "1ebcccc5eb049258b85e0ff7027b6dff",
      "outputs": [],
      "console": []
    },
    {
      "id": "Xref",
      "code_hash": "7293611d0d7a2b2186833756bbaad519",
      "outputs": [],
      "console": []
    },
    {
      "id": "SFPL",
      "code_hash": "241d2c488c8af88e7f2ca0d1540796d9",
      "outputs": [],
      "console": []
    },
    {
      "id": "BYtC",
      "code_hash": "0e311ee8d99dbfdc809cf861ec7fb624",
      "outputs": [],
      "console": []
    },
    {
      "id": "RGSE",
      "code_hash": "0362e8ec0af11082445677a9786a859c",
      "outputs": [],
      "console": []
    },
    {
      "id": "Kclp",
      "code_hash": "3e914b812f3aaf6b5bae8ac913af0d6f",
      "outputs": [],
      "console": []
    },
    {
      "id": "emfo",
      "code_hash": "f3787b03091da8f7d84e7b059b378551",
      "outputs": [],
      "console": []
    },
    {
      "id": "Hstk",
      "code_hash": "fe73b0f65a602f03b52568654449b3ec",
      "outputs": [],
      "console": []
    },
    {
      "id": "nWHF",
      "code_hash": "ff30fd57a49a9a6acc4af498e0ba8cb9",
      "outputs": [],
      "console": []
    },
    {
      "id": "iLit",
      "code_hash": "e3f8a05b9d38a04117c4fdd63332d327",
      "outputs": [],
      "console": []
    },
    {
      "id": "ZHCJ",
      "code_hash": "e27401646893dff652bf2585dd42be3b",
      "outputs": [],
      "console": []
    },
    {
      "id": "ROlb",
      "code_hash": "dc2fd10ab3c5226eb5292a383959abb6",
      "outputs": [],
      "console": []
    },
    {
      "id": "qnkX",
      "code_hash": "2d9aa3e7b607b8bd8235f4c7c47dcd7f",
      "outputs": [],
      "console": []
    },
    {
      "id": "TqIu",
      "code_hash": "80bbf05dc85d165e70533c4e16f34248",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">to check what types were inffered\n  <div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ldf</span><span class=\"o\">.</span><span class=\"n\">schema</span>\n</code></pre></div>\n<code>ldf.collect_schema()</code> does not process your data, it just runs through the optimised query plan</span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Vxnm",
      "code_hash": "b13b83069ca0ba394677d479557eb1e2",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">to create lazy frame from data:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">LazyFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;values&quot;</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]})</span>\n</code></pre></div></span>\n<span class=\"paragraph\">to change df into ldf:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ldf</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">()</span>\n</code></pre></div></span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "DnEU",
      "code_hash": "bb2d604e3bca256fdc81842b35846430",
      "outputs": [],
      "console": []
    },
    {
      "id": "ulZA",
      "code_hash": "5f283dccf5c1b3d40b7c6cbba194b75a",
      "outputs": [],
      "console": []
    },
    {
      "id": "ecfG",
      "code_hash": "46944296bc7843732ab50277d5631786",
      "outputs": [],
      "console": []
    },
    {
      "id": "Pvdt",
      "code_hash": "51fdb5e89be247dc619f6912c133abd1",
      "outputs": [],
      "console": []
    },
    {
      "id": "ZBYS",
      "code_hash": "3ed3dbd28d3a797b1bc7244da532f8a4",
      "outputs": [],
      "console": []
    },
    {
      "id": "aLJB",
      "code_hash": "e38d80ce4269d2a0f8b4d06423cf48dd",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"streaming-larger-than-memory-datasets\">Streaming larger-than-memory datasets</h2>\n<ul>\n<li>when streaming is enabled ploars process dataframe in chunks</li>\n<li>To enable streaming pass to <code>collect</code> argument <code>streaming=True</code></li>\n<li>Streaming is not supported for all operations. However, many key operations such as <code>filter</code>, <code>groupby</code> and <code>join</code> support streaming. If streaming is not possible then Polars will run the query without streaming.</li>\n</ul></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "nHfw",
      "code_hash": "78a9a238c356826082adbe711697f65f",
      "outputs": [],
      "console": []
    },
    {
      "id": "gVsr",
      "code_hash": "da841e2bb5c409d5404b421c7d70c145",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"limits-of-lazy-mode\">Limits of lazy mode</h2>\n<span class=\"paragraph\">There are operations that cannot be done in lazy mode.\nIn this case it's recommended to stay in lazy mode as long as posible. Convert to eager data frame for problematic operation and then conver back to lazy dataframe\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span>\n    <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">scan_csv</span><span class=\"p\">(</span><span class=\"n\">csv_file</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">pivot</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s2\">&quot;Pclass&quot;</span><span class=\"p\">,</span><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s2\">&quot;Sex&quot;</span><span class=\"p\">,</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">,</span><span class=\"n\">aggregate_function</span><span class=\"o\">=</span><span class=\"s2\">&quot;mean&quot;</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</code></pre></div></span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "qIMA",
      "code_hash": "278c66dc4cad115128f4b94a4401d58d",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"exercise-131\">Exercise 1.3.1</h3>\n<span class=\"paragraph\">Create a <code>LazyFrame</code> and covert it to eager mode</span>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span>\n    <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">scan_csv</span><span class=\"p\">(</span><span class=\"n\">csv_file</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "IrOF",
      "code_hash": "ff6e4bd343fa02b4f58a2185b05a5593",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"data-frame-methods\">Data frame methods</h2>\n<ul>\n<li>df.width</li>\n<li>df.height</li>\n<li>df.schema</li>\n<li>df.dtypes</li>\n</ul>\n<span class=\"paragraph\">Metod for comparing shemas</span>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">compare_polars_schema</span><span class=\"p\">(</span>\n        <span class=\"n\">df_schema</span><span class=\"p\">:</span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">,</span> \n        <span class=\"n\">target_schema</span><span class=\"p\">:</span> <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Schema</span>\n<span class=\"p\">):</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"sd\">Compare two pl.Schema and report on any differences</span>\n<span class=\"sd\">Args:</span>\n<span class=\"sd\">    df_schema (OrderedDict): The schema of our DataFrame</span>\n<span class=\"sd\">    target_schema (OrderedDict): The target schema of our DataFrame that we are comparing to</span>\n\n<span class=\"sd\">Returns:</span>\n<span class=\"sd\">    Dict containing comparison details, with keys indicating the type of difference</span>\n<span class=\"sd\">&#39;&#39;&#39;</span>\n    <span class=\"c1\"># Check if they are the same</span>\n    <span class=\"k\">if</span> <span class=\"n\">df_schema</span> <span class=\"o\">==</span> <span class=\"n\">target_schema</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">&quot;match&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n\n    <span class=\"c1\"># Otherwise do a detailed comparison</span>\n    <span class=\"n\">comparison_result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;match&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;differences&quot;</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Check keys</span>\n    <span class=\"n\">df_keys</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">df_schema</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">target_keys</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">target_schema</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># Check for missing or extra keys</span>\n    <span class=\"n\">missing_in_target_schema</span> <span class=\"o\">=</span> <span class=\"n\">df_keys</span> <span class=\"o\">-</span> <span class=\"n\">target_keys</span>\n    <span class=\"n\">missing_in_df_schema</span> <span class=\"o\">=</span> <span class=\"n\">target_keys</span> <span class=\"o\">-</span> <span class=\"n\">df_keys</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">missing_in_target_schema</span><span class=\"p\">:</span>\n        <span class=\"n\">comparison_result</span><span class=\"p\">[</span><span class=\"s2\">&quot;differences&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;keys_missing_in_target&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">missing_in_target_schema</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">missing_in_df_schema</span><span class=\"p\">:</span>\n        <span class=\"n\">comparison_result</span><span class=\"p\">[</span><span class=\"s2\">&quot;differences&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;keys_missing_in_df&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">missing_in_df_schema</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check common keys for dtype differences</span>\n    <span class=\"n\">common_keys</span> <span class=\"o\">=</span> <span class=\"n\">df_keys</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">target_keys</span><span class=\"p\">)</span>\n\n    <span class=\"n\">dtype_differences</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">common_keys</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">df_schema</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">target_schema</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]:</span>\n            <span class=\"n\">dtype_differences</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;df_type&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">df_schema</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]),</span>\n                <span class=\"s2\">&quot;target_type&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">target_schema</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n            <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">dtype_differences</span><span class=\"p\">:</span>\n        <span class=\"n\">comparison_result</span><span class=\"p\">[</span><span class=\"s2\">&quot;differences&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;dtype_mismatches&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dtype_differences</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">comparison_result</span>\n</code></pre></div></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "MRbf",
      "code_hash": "89207e7e83c64f69805fac4f5069f9c4",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Phvh",
      "code_hash": "8fb412d73d95071c70135ed3341189ac",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">polars use for cols apache arrow</span>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">to_arrow</span><span class=\"p\">()</span>\n</code></pre></div>\n<span class=\"paragraph\">A Polars <code>DataFrame</code> holds references to an Arrow Table which holds references to Arrow Arrays. We can think of a Polars <code>DataFrame</code> being a lightweight object that points to the lightweight Arrow Table which points to the heavyweight Arrow Arrays (heavyweight because they hold the actual data). </span></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "xegJ",
      "code_hash": "8fbe01036eb95c2936c0e66d561b1d07",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "This cell raised an exception: TypeError('Series constructor called with unsupported type 'ndarray' for the `values` parameter')",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/home/arek/KLOD/python/polars/polars_notes_in_marimo/.venv/lib64/python3.13/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">141</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_14833/__marimo__cell_xegJ_.py&quot;</span>, line <span class=\"m\">3</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">df_polars</span> <span class=\"o\">=</span> <span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">from_numpy</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">&quot;col_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])])</span>\n  File <span class=\"nb\">&quot;/home/arek/KLOD/python/polars/polars_notes_in_marimo/.venv/lib64/python3.13/site-packages/polars/convert/general.py&quot;</span>, line <span class=\"m\">360</span>, in <span class=\"n\">from_numpy</span>\n<span class=\"w\">    </span><span class=\"n\">numpy_to_pydf</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~~~~~~~~~~^</span>\n<span class=\"w\">    </span>    <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"n\">orient</span><span class=\"p\">,</span> <span class=\"n\">schema_overrides</span><span class=\"o\">=</span><span class=\"n\">schema_overrides</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"pm\">^</span>\n  File <span class=\"nb\">&quot;/home/arek/KLOD/python/polars/polars_notes_in_marimo/.venv/lib64/python3.13/site-packages/polars/_utils/construction/dataframe.py&quot;</span>, line <span class=\"m\">1303</span>, in <span class=\"n\">numpy_to_pydf</span>\n<span class=\"w\">    </span><span class=\"n\">pl</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"pm\">~~~~~~~~~^</span>\n<span class=\"w\">    </span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">column_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"o\">...&lt;</span><span class=\"mi\">7</span> <span class=\"n\">lines</span><span class=\"o\">&gt;...</span>\n<span class=\"w\">    </span>    <span class=\"n\">nan_to_null</span><span class=\"o\">=</span><span class=\"n\">nan_to_null</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_s</span>\n<span class=\"w\">    </span><span class=\"pm\">^</span>\n  File <span class=\"nb\">&quot;/home/arek/KLOD/python/polars/polars_notes_in_marimo/.venv/lib64/python3.13/site-packages/polars/series/series.py&quot;</span>, line <span class=\"m\">356</span>, in <span class=\"n\">__init__</span>\n<span class=\"w\">    </span><span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"gr\">TypeError</span>: <span class=\"n\">Series constructor called with unsupported type &#39;ndarray&#39; for the `values` parameter</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "pWXd",
      "code_hash": "2165a3ac278eb64f0d36dac4f79fbeda",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    }
  ]
}